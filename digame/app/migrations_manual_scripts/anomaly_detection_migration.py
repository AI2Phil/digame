"""
Manually defined Alembic migration for the DetectedAnomaly model.
This is provided because autogeneration is currently failing.
"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import func # For server_default=func.now()

# Placeholder revision identifiers. In a real scenario, these would be generated by Alembic.
revision = 'manual_add_detected_anomalies_table'
# Replace with the actual revision ID of the migration that created the 'users' table
# or the latest migration if 'users' is much older.
down_revision = 'previous_migration_that_created_users_table' 
branch_labels = None
depends_on = None


def upgrade():
    """
    Creates the 'detected_anomalies' table in the database.
    """
    op.create_table(
        'detected_anomalies',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        
        # Assuming User.id is Integer based on existing User model.
        # If User.id were String/UUID, this Column type and ForeignKey target would change.
        sa.Column('user_id', sa.Integer(), nullable=False),
        
        sa.Column('timestamp', sa.DateTime(), server_default=func.now(), nullable=False),
        sa.Column('anomaly_type', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=False),
        sa.Column('severity_score', sa.Float(), nullable=True),
        sa.Column('related_activity_ids', sa.JSON(), nullable=True),
        sa.Column('status', sa.String(), server_default='new', nullable=False), # Default 'new'
        
        # Constraints
        sa.PrimaryKeyConstraint('id'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_detected_anomalies_user_id_users')
    )
    
    # Create indexes explicitly
    op.create_index(op.f('ix_detected_anomalies_id'), 'detected_anomalies', ['id'], unique=False)
    op.create_index(op.f('ix_detected_anomalies_user_id'), 'detected_anomalies', ['user_id'], unique=False)
    op.create_index(op.f('ix_detected_anomalies_anomaly_type'), 'detected_anomalies', ['anomaly_type'], unique=False)
    op.create_index(op.f('ix_detected_anomalies_status'), 'detected_anomalies', ['status'], unique=False)

def downgrade():
    """
    Removes the 'detected_anomalies' table from the database.
    """
    op.drop_index(op.f('ix_detected_anomalies_status'), table_name='detected_anomalies')
    op.drop_index(op.f('ix_detected_anomalies_anomaly_type'), table_name='detected_anomalies')
    op.drop_index(op.f('ix_detected_anomalies_user_id'), table_name='detected_anomalies')
    op.drop_index(op.f('ix_detected_anomalies_id'), table_name='detected_anomalies')
    
    op.drop_table('detected_anomalies')

# Note on server_default for 'status':
# `server_default='new'` is used for String type. For boolean, `sa.false()` or `sa.text('0')` is used.
# For `timestamp`, `server_default=func.now()` uses the database's current time function.
