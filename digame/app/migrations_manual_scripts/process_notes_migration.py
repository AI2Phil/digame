"""
Manually defined Alembic migration for the ProcessNote model.
This would typically be in a file within migrations/versions/
generated by `alembic revision -m ... --autogenerate`.
"""

from alembic import op
import sqlalchemy as sa
# For specific JSON types, one might import:
# from sqlalchemy.dialects import postgresql

# Placeholder revision identifiers. In a real scenario, these would be generated by Alembic.
revision = 'manual_add_process_notes_table'
down_revision = 'previous_migration_revision_id' # Replace with actual down_revision ID
branch_labels = None
depends_on = None


def upgrade():
    """
    Creates the 'process_notes' table in the database.
    """
    op.create_table(
        'process_notes',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('inferred_task_name', sa.String(), nullable=True),
        sa.Column('process_steps_description', sa.Text(), nullable=False),
        sa.Column('source_activity_ids', sa.JSON(), nullable=True),
        sa.Column('occurrence_count', sa.Integer(), server_default=sa.text('1'), nullable=False),
        sa.Column('first_observed_at', sa.DateTime(), server_default=sa.func.now(), nullable=False),
        sa.Column('last_observed_at', sa.DateTime(), server_default=sa.func.now(), onupdate=sa.func.now(), nullable=False),
        sa.Column('user_feedback', sa.String(), nullable=True),
        sa.Column('user_tags', sa.JSON(), nullable=True),
        
        # Constraints
        sa.PrimaryKeyConstraint('id'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_process_notes_user_id_users') # Optional: naming the constraint
    )
    
    # Create indexes explicitly if not automatically created by PK/FK for all DBs, or for performance
    op.create_index(op.f('ix_process_notes_id'), 'process_notes', ['id'], unique=False)
    op.create_index(op.f('ix_process_notes_user_id'), 'process_notes', ['user_id'], unique=False)


def downgrade():
    """
    Removes the 'process_notes' table from the database.
    """
    # Drop indexes first (optional, but good practice if they were explicitly named/created)
    op.drop_index(op.f('ix_process_notes_user_id'), table_name='process_notes')
    op.drop_index(op.f('ix_process_notes_id'), table_name='process_notes')
    
    op.drop_table('process_notes')

# Example of how this might be used or tested conceptually (not part of the script itself):
# if __name__ == '__main__':
#     # This part is for illustration if you were to run this script directly for setup,
#     # which is NOT how Alembic migrations are typically applied.
#     # Alembic uses its own mechanisms to run upgrade/downgrade.
#     
#     # Mocking Alembic's op and sa for standalone conceptual check (very simplified)
#     class MockOp:
#         def create_table(self, *args, **kwargs):
#             print(f"op.create_table called with: {args}, {kwargs}")
#         def drop_table(self, *args, **kwargs):
#             print(f"op.drop_table called with: {args}, {kwargs}")
#         def create_index(self, *args, **kwargs):
#             print(f"op.create_index called with: {args}, {kwargs}")
#         def drop_index(self, *args, **kwargs):
#             print(f"op.drop_index called with: {args}, {kwargs}")
#         def f(self, name): # Mock for op.f() used in index names
#             return name
#
#     class MockSa:
#         def Column(self, *args, **kwargs): return f"Column({args}, {kwargs})"
#         def Integer(self): return "IntegerType"
#         def String(self): return "StringType"
#         def Text(self): return "TextType"
#         def JSON(self): return "JSONType"
#         def DateTime(self): return "DateTimeType"
#         def PrimaryKeyConstraint(self, *args): return f"PrimaryKeyConstraint({args})"
#         def ForeignKeyConstraint(self, *args, **kwargs): return f"ForeignKeyConstraint({args}, {kwargs})"
#         def text(self, val): return f"SQLText('{val}')"
#         class func_cl: # Mock for sa.func
#             def now(self): return "NOW()"
#         func = func_cl()
#
#     op = MockOp()
#     sa = MockSa()
#
#     print("--- Conceptual Upgrade ---")
#     upgrade()
#     print("\n--- Conceptual Downgrade ---")
#     downgrade()
